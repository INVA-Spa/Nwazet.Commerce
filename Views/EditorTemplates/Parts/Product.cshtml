@using Nwazet.Commerce.Models
@using Nwazet.Commerce.Services
@using Orchard.ContentManagement
@model Nwazet.Commerce.ViewModels.ProductEditorViewModel

@*
    TODO : add the number of decimals after the comma in the settings
    display at front-end the number with two decimal digits.
    save the number in db with the decimal digits indicated by the setting
*@
<fieldset class="product-part-edit product-part-base-info">
    <label class="sub" for="@Html.IdFor(m => m.Product.Sku)">@T("Sku")</label><br />
    @Html.TextBoxFor(m => m.Product.Sku, new { @class = "text" })<br />
    <span class="hint">@T("The SKU uniquely identifies a product. Changing the SKU may have unwanted side-effects.")</span>
    <label class="sub" for="@Html.IdFor(m => m.Product.Price)">@T("Regular Price")</label><br />
    @Html.TextBox("Product.Price", Model.Product.Price.ToString("0.0000"), new { @class = "small text" })<br />
    <label class="sub" for="@Html.Id("DiscountPrice")">@T("Discounted Price")</label><br />
    @Html.TextBox("DiscountPrice", Model.Product.DiscountPrice >= 0
        ? Model.Product.DiscountPrice.ToString("0.0000")
        : "",
        new { @class = "small text" })
    <p class="hint" for="@Html.Id("DiscountPrice")">@T("Leave the discounted price empty to have the regular price apply.")</p>

    @if (Model.AllowProductOverrides) {
        @Html.CheckBoxFor(m => m.Product.OverrideTieredPricing)
        <label class="sub" for="@Html.IdFor(m => m.Product.OverrideTieredPricing)">@T("override tiered pricing")</label>
    }
</fieldset>

@Display.PriceTiersAdmin(PriceTiers: Model.PriceTiers, ShowPriceTiers: (Model.AllowProductOverrides && Model.Product.OverrideTieredPricing), NamePrefix: Html.NameForModel(), ToggleCheckboxId: Html.IdFor(m => m.Product.OverrideTieredPricing))
