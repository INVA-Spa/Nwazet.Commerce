@using System.Globalization
@using Nwazet.Commerce.Services
@using System.Collections.Generic
@using Nwazet.Commerce.Models;
@using System.Linq;
@using Orchard.ContentManagement;

@model Nwazet.Commerce.ViewModels.OrderEditorViewModel
@{
    Script.Require("jQuery");
    Style.Include("order-admin.css", "order-admin.min.css");
    Script.Include("order-admin.js", "order-admin.min.js");

    var _contentManager = WorkContext.Resolve<IContentManager>();

    var charge = Model.Order.Charge;
    var chargeText = Model.PaymentProviderText;
    if (string.IsNullOrWhiteSpace(chargeText)) {
        chargeText = charge.ChargeText;
    }
    Currency currencyInUse = Currency.Currencies[Model.CurrencyCode];
    CultureInfo cultureInUse = CultureInfo.GetCultureInfo(WorkContext.CurrentCulture);

    var creationDate = (DateTime?)(((dynamic)Model.Order.ContentItem).CommonPart.CreatedUtc);
}

@helper ViewItemActivity(bool compareEqual, OrderEvent orderEvent, List<string> dateActivity) {
    <li>
        @if (compareEqual) {
            <p>
                @T("From {0} to {1}", dateActivity.First(), dateActivity.Last())
                (@orderEvent.Category)
                @Html.Raw(orderEvent.Description)
                @T("({0})", dateActivity.Count)
            </p>
        }
        else {
            <p>
                @orderEvent.Date.ToLocalTime().ToString(CultureInfo.CurrentCulture)
                (@orderEvent.Category)
                @Html.Raw(orderEvent.Description)
            </p>
        }
    </li>
}

<div class="order-editor">
    @Html.HiddenFor(m => m.CurrencyCode)
    <fieldset class="order-metadata">
        <legend>@T("Order:")</legend>
        <div class="order-id">@T("ID: {0}", Model.Order.Id)</div>
        <div class="order-date">@T("Ordered {0} ({1})", Display.DateTimeRelative(dateTimeUtc: creationDate), Display.DateTime(DateTimeUtc: creationDate))</div>
        <div class="order-user-edit">
            @Orchard.Mvc.Html.HtmlHelperExtensions.LabelFor(Html, m => m.Order.PurchaseOrder, T("Purchase order:").Text)
            @Html.TextBoxFor(m => m.Order.PurchaseOrder, new { @class = "text-medium order-purchase-order-edit-field" })
            <span class="hint">@T("Associate this order with a purchase order, invoice or other order.")</span>
        </div>
        @foreach (var additionalShape in Model.AdditionalMetadataShapes) {
            @Display(additionalShape)
        }
    </fieldset>
    <fieldset class="order-status">
        <legend>@T("Status:")</legend>
        <ul>
            @foreach (var state in Model.OrderStates) {
                var stateid = ViewData.TemplateInfo.GetFullHtmlFieldId("Status_" + state);
                <li>
                    @Html.RadioButtonFor(m => m.Order.Status, state, new { @id = stateid })
                    @Html.Label("Status_" + state, Model.StatusLabels[state].Text)
                </li>
            }
        </ul>
        @foreach (var additionalShape in Model.AdditionalStatusShapes) {
            @Display(additionalShape)
        }
    </fieldset>

    <div class="addresses">
        <fieldset class="shipping-address">
            <legend>@T("Shipping to:")</legend>
            <div class="address-view">
                @Html.Raw(Html.Encode(Model.ShippingAddressText).Replace(Environment.NewLine, "<br/>"))
            </div>
            <div class="address-form">
                @Html.TextBoxFor(m => m.Order.ShippingAddress.Honorific, new { @class = "text-small", title = T("Honorific") })
                @Html.TextBoxFor(m => m.Order.ShippingAddress.FirstName, new { @class = "text", title = T("First Name") })
                @Html.TextBoxFor(m => m.Order.ShippingAddress.LastName, new { @class = "text", title = T("Last Name") })<br />
                @Html.TextBoxFor(m => m.Order.ShippingAddress.Company, new { @class = "text-medium", title = T("Company") })<br />
                @Html.TextBoxFor(m => m.Order.ShippingAddress.Address1, new { @class = "text-medium", title = T("Address 1") })<br />
                @Html.TextBoxFor(m => m.Order.ShippingAddress.Address2, new { @class = "text-medium", title = T("Address 2") })<br />
                @Html.TextBoxFor(m => m.Order.ShippingAddress.City, new { @class = "text", title = T("City") })
                @Html.TextBoxFor(m => m.Order.ShippingAddress.Province, new { @class = "text-small", title = T("Province or State") })
                @Html.TextBoxFor(m => m.Order.ShippingAddress.PostalCode, new { @class = "text-small", title = T("Postal code") })<br />
                @Html.TextBoxFor(m => m.Order.ShippingAddress.Country, new { @class = "text-medium", title = T("Country") })
            </div>
        </fieldset>

        <fieldset class="billing-address">
            <legend>@T("Billing:")</legend>
            <div class="address-view">
                @Html.Raw(Html.Encode(Model.BillingAddressText).Replace(Environment.NewLine, "<br/>"))
            </div>
            <div class="address-form">
                @Html.TextBoxFor(m => m.Order.BillingAddress.Honorific, new { @class = "text-small", title = T("Honorific") })
                @Html.TextBoxFor(m => m.Order.BillingAddress.FirstName, new { @class = "text", title = T("First Name") })
                @Html.TextBoxFor(m => m.Order.BillingAddress.LastName, new { @class = "text", title = T("Last Name") })<br />
                @Html.TextBoxFor(m => m.Order.BillingAddress.Company, new { @class = "text-medium", title = T("Company") })<br />
                @Html.TextBoxFor(m => m.Order.BillingAddress.Address1, new { @class = "text-medium", title = T("Address 1") })<br />
                @Html.TextBoxFor(m => m.Order.BillingAddress.Address2, new { @class = "text-medium", title = T("Address 2") })<br />
                @Html.TextBoxFor(m => m.Order.BillingAddress.City, new { @class = "text", title = T("City") })
                @Html.TextBoxFor(m => m.Order.BillingAddress.Province, new { @class = "text-small", title = T("Province or State") })
                @Html.TextBoxFor(m => m.Order.BillingAddress.PostalCode, new { @class = "text-small", title = T("Postal code") })<br />
                @Html.TextBoxFor(m => m.Order.BillingAddress.Country, new { @class = "text-medium", title = T("Country") })
            </div>
        </fieldset>

        <p>@T("E-mail:") <a href="@("mailto:" + Model.Order.CustomerEmail)">@Model.Order.CustomerEmail</a></p>
        <p>@T("Phone:") <a href="@("tel:" + Model.Order.CustomerPhone)">@Model.Order.CustomerPhone</a></p>

        @foreach (var additionalShape in Model.AdditionalAddressesShapes) {
            @Display(additionalShape)
        }
    </div>

    <fieldset class="order-items">
        <legend>@T("Products:")</legend>
        <table id="order_products_table">
            <thead>
                <tr>
                    <th class="quantity"><abbr title="@T("Quantity")">@T("Qty")</abbr></th>
                    <th class="description">@T("Product")</th>
                    <th class="price">@T("Original price")</th>
                    <th class="price">@T("Price")</th>
                    @if (Model.OrderItems.Any(oi => oi.LinePriceAdjustment != 0)) {
                        <th class="price">@T("Adjustment")</th>
                    }
                    @foreach (var additionalInfo in Model.AdditionalProductInformation) {
                        <th @(string.IsNullOrEmpty(additionalInfo.HeaderClass) ? "" : "class=\"" + additionalInfo.HeaderClass + "\"")>@additionalInfo.Title</th>
                    }
                </tr>
            </thead>
            <tbody id="order_products_table_body">
                @foreach (var item in Model.OrderItems) {
                    string originalPrice = "";
                    if (item.Price != item.OriginalPrice && item.OriginalPrice != (decimal)0.0) {
                        originalPrice = String.Format("<strike>{0}</strike>", currencyInUse.PriceAsString(item.OriginalPrice, cultureInUse));
                    }

                    <tr id="@string.Format("order_products_table_row-product_{0}", item.ProductId)">
                        <td class="quantity">@item.Quantity &times;</td>
                        <td class="description">
                            @* check is a product *@
                            @if (_contentManager.Get(item.ProductId)?.As<ProductPart>() != null) {
                                <a href="@Url.ItemDisplayUrl(Model.Products[item.ProductId])" target="_blank">@item.Title</a>
                            }
                            else {
                                <span>@item.Title</span>
                            }
                        </td>
                        <td class="price">@Html.Raw(originalPrice)</td>
                        <td class="price">@currencyInUse.PriceAsString(item.Price, cultureInUse)</td>
                        @if (item.LinePriceAdjustment != 0) {
                            <td class="price">@currencyInUse.PriceAsString(item.LinePriceAdjustment, cultureInUse)</td>
                        }
                        @foreach (var additionalInfo in Model.AdditionalProductInformation) {
                            <td @(string.IsNullOrEmpty(additionalInfo.InformationClass) ? "" : "class=\"" + additionalInfo.InformationClass + "\"")>
                                @if (additionalInfo.Information.ContainsKey(item.ProductId)) {
                                    @additionalInfo.Information[item.ProductId]
                                }
                            </td>
                        }
                    </tr>
                    if (item.Attributes != null && item.Attributes.Any(a => a.Value.ExtensionProviderInstance != null)) {
                        <tr>
                            <td colspan="2">
                                @foreach (var attr in item.Attributes) {
                                    if (attr.Value.ExtensionProviderInstance != null) {
                                        @Display(attr.Value.ExtensionProviderInstance.BuildAdminShape(attr.Value.ExtendedValue))
                                    }
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>

            <tfoot>
                <tr class="subtotal">
                    <td colspan="3" class="label">@T("Subtotal")</td>
                    <td class="price">@currencyInUse.PriceAsString(Model.Order.SubTotal, cultureInUse)</td>
                </tr>
                <tr class="taxes">
                    <td colspan="3" class="label">@T("Taxes {0}", string.IsNullOrWhiteSpace(Model.Order.Taxes.Name) ? T("Taxes").Text : Model.Order.Taxes.Name)</td>
                    <td class="price">@currencyInUse.PriceAsString(Model.Order.Taxes.Amount, cultureInUse)</td>
                </tr>
                <tr class="shipping">
                    <td colspan="3" class="label">@T("{0} {1}", Model.Order.ShippingOption.ShippingCompany, Model.Order.ShippingOption.Description)</td>
                    <td class="price">@currencyInUse.PriceAsString(Model.Order.ShippingOption.Price, cultureInUse)</td>
                </tr>
                <tr class="total">
                    <td colspan="3" class="label">@T("Total")</td>
                    <td class="price">@currencyInUse.PriceAsString(Model.Order.Total, cultureInUse)</td>
                </tr>
                <tr class="amountPaid">
                    <td colspan="3" class="label">@T("Amount Paid")</td>
                    <td class="price@(Model.Order.AmountPaid < Model.Order.Total ? " red" : "")">
                        @Html.TextBoxFor(m => m.Order.AmountPaid, "{0:F2}", new { @class = "text order-amount-field", style = "text-align: right;", pattern = "[0-9]+([\\.,][0-9]+)?" })
                    </td>
                </tr>
            </tfoot>
        </table>
        @foreach (var additionalShape in Model.AdditionalProductShapes) {
            @Display(additionalShape)
        }
    </fieldset>

    <fieldset>
        <legend>@T("Charged to:")</legend>
        <p>@chargeText</p>
        @if (!string.IsNullOrEmpty(Model.LinkToTransaction)) {
            <p>@T("Transaction <a href=\"{1}\">{0}</a>.", charge.TransactionId, Model.LinkToTransaction)</p>
        }
    </fieldset>

    <fieldset class="order-tracking">
        <legend>@T("Tracking URL:")</legend>
        <div class="order-tracking-view">
            <a href="@Model.Order.TrackingUrl">@Model.Order.TrackingUrl</a>
            <button class="edit-button link">@T("Edit")</button>
        </div>
        <div class="order-tracking-edit">
            @Html.TextBoxFor(m => m.Order.TrackingUrl, new { @class = "text-medium order-tracking-edit-field" })
            <button class="cancel-button link">@T("Cancel")</button>
        </div>

        @foreach (var additionalShape in Model.AdditionalOrderTrackingShapes) {
            @Display(additionalShape)
        }
    </fieldset>

    @if (!string.IsNullOrWhiteSpace(Model.Order.SpecialInstructions)) {
        <fieldset>
            <legend>@T("Special instructions:")</legend>
            @Model.Order.SpecialInstructions
        </fieldset>
    }

    <fieldset class="order-events"
              data-add-event-url="@Url.Action("AddEvent", "OrderAdmin", new {area = "Nwazet.Commerce"})" data-order-id="@Model.Order.Id">
        <legend>@T("Activity:")</legend>
        <ul class="order-event-log">
            @{
                if (Model.Order.Activity != null) {
                    // verify if there are successive identical descriptions and
                    // writes only one line with the largest to the smallest date and number of item
                    var listActivity = ((IEnumerable<OrderEvent>)Model.Order.Activity.OrderByDescending(o => o.Date)).ToList();
                    List<string> dateActivity = new List<string>();
                    bool compareEqual = false;
                    for (int i = 0; i < listActivity.Count; i++) {
                        dateActivity.Add(listActivity[i].Date.ToLocalTime().ToString(CultureInfo.CurrentCulture));

                        if (i + 1 == listActivity.Count) {
                            @Html.Raw(ViewItemActivity(compareEqual, listActivity[i], dateActivity));
                        }
                        else {
                            if (listActivity[i].Description.Trim() != listActivity[i + 1].Description.Trim()) {
                                @Html.Raw(ViewItemActivity(compareEqual, listActivity[i], dateActivity));

                                dateActivity = new List<string>();
                                compareEqual = false;
                            }
                            else {
                                compareEqual = true;
                            }
                        }
                    }
                }
            }
        </ul>

        <div class="order-event-add">
            <ul>
                @foreach (var category in Model.EventCategories) {
                    var stateid = ViewData.TemplateInfo.GetFullHtmlFieldId("EventCategory_" + category);
                    <li>
                        @Html.RadioButton("EventCategory", category, new { @id = stateid, @class = "new-order-event-category" })
                        @Html.Label("EventCategory_" + category, Model.EventCategoryLabels[category].Text)
                    </li>
                }
            </ul>
            <textarea class="new-order-event-description"></textarea>
            <button type="button" class="new-order-event-add button grey">@T("Add")</button>
        </div>
    </fieldset>

    @if (Model.UserNameNeeded) {
        <fieldset class="order-user">
            <legend>@T("Order Username:")</legend>
            <div class="order-user-edit">
                @Html.TextBoxFor(m => m.UserName, new { @class = "text-medium order-user-edit-field" })
                <span class="hint">@T("Associate this order with a username.")</span>
            </div>
        </fieldset>
    }
    else {
        @Html.HiddenFor(m => m.UserName)
    }

    <div class="order-link">
        @T("You may view this order at a later time by going to this address: <a href=\"{0}\">{0}</a>, using this password: \"{1}\".",
        Url.Action("Show", "OrderSsl", new {id = Model.Order.Id, area = "Nwazet.Commerce"}), Model.Order.Password)
    </div>
</div>